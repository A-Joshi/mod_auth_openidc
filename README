mod_auth_openidc is an authentication/authorization module for the Apache 2.x
HTTP server that allows users to authenticate using an OpenID Connect enabled
Identity Provider

It enables the Apache web server to operate as an OpenID Connect Relying Party
using the OpenID Connect Basic Client or Implicit Client profile.

It sets the REMOTE_USER variable to the id_token sub claim. Other id_token
claims are passed in HTTP headers together with those (optionally) obtained
from the user info endpoint

It allows for authorization rules (based on standard Apache Requires primitives)
that can be matched against the set of claims provided in the id_token/userinfo.

It supports multiple OpenID Connect Providers by reading provider metadata files
from a metadata directory (configured in OIDCMetadataDir).

It supports OpenID Connect Dynamic Client Registration and OpenID Provider
Discovery through domain or account names.

Additionally it can operate as an OAuth 2.0 Resource Server to a PingFederate
OAuth 2.0 Authorization Server, validating Bearer access_tokens against
PingFederate. In that case it sets the REMOTE_USER variable to the "Username"
claim and matches the claims in the intro-spected access_token against the
Requires primitive.

It implements server-side caching across different Apache processes through one
of the following options:
 a) file storage: in a temp directory - possibly a shared file system across
    multiple Apache processes and/or servers
 b) shared memory: shared across a single logical Apache server running as
    multiple Apache processes (using mpm_prefork) on the same machine
 c) memcache: shared across multiple Apache processes and/or servers, possibly
    across different memcache servers living on different machines



For an exhaustive description of all configuration options, see:
https://github.com/pingidentity/mod_auth_openidc/blob/master/debian/auth_openidc.conf



==========================================================
Sample Config for Google Accounts
==========================================================

Example config for using Google as your OpenID Connect Provider running on
localhost and https://localhost/example/redirect_uri/ registered as the
"redirect_uri" for the client through the Google API Console.

==========================================================
OIDCProviderIssuer accounts.google.com
OIDCProviderAuthorizationEndpoint https://accounts.google.com/o/oauth2/auth?approval_prompt=force&[hd=<your-domain>]
OIDCProviderTokenEndpoint https://accounts.google.com/o/oauth2/token
OIDCProviderTokenEndpointAuth client_secret_post
OIDCProviderUserInfoEndpoint https://www.googleapis.com/plus/v1/people/me/openIdConnect
OIDCProviderJwksUri https://www.googleapis.com/oauth2/v2/certs

OIDCClientID <your-client-id-administered-through-the-google-api-console>
OIDCClientSecret <your-client-secret-administered-through-the-google-api-console>

OIDCScope "openid email profile"
OIDCRedirectURI https://localhost/example/redirect_uri/
OIDCCryptoPassphrase <password>

<Location /example/>
   Authtype openid-connect
   require valid-user
</Location>
==========================================================



==========================================================
Sample Config for multiple OpenID Connect Providers
==========================================================

Another example using multiple OpenID Connect providers, which triggers
OP discovery first:

OIDCMetadataDir points to a directory that contains files that contain
per-provider configuration data. For each provider, there are 2 types of
files in the directory:
  <url-encoded-issuer-value-with-https-prefix-and-trailing-slash-stripped>.provider:
contains (standard) OpenID Connect Discovery OP JSON metadata where each
name of the file is the urlencoded issuer name of the OP that is decribed
by the metadata in that file.
  <url-encoded-issuer-value-with-https-prefix-and-trailing-slash-stripped>.client:
contains mod_auth_openidc specific JSON metadata (based on the OpenID
Connect Client Registration specification, with extensions) and the filename
is the urlencoded issuer name of the OP that this client is registered with.

Sample client metdata for issuer https://localhost:9031, so the client metadata
filename is: "macbook%3a9031.client"
==========================================================
{
  "ssl_validate_server" : "Off",
  "client_id" : "ac_oic_client",
  "client_secret" : "abc123DEFghijklmnop4567rstuvwxyzZYXWUT8910SRQPOnmlijhoauthplaygroundapplication",
  "scope" : "openid email profile",
}
==========================================================

And the related mod_auth_openidc Apache config section:
==========================================================
OIDCMetadataDir <somewhere-writable-for-the-apache-process>/metadata

OIDCRedirectURI https://localhost/example/redirect_uri/
OIDCCryptoPassphrase <password>

<Location /example/>
   Authtype openid-connect
   require valid-user
</Location>
==========================================================

If you do not want to use the internal discovery page, you can have the user
being redirected to an external discovery page by setting "OIDCDiscoveryURL".
That URL will be accessed with 2 parameters, "oidc_callback" and "oidc_return"
(both URLs). The "oidc_return" parameter needs to be returned to the
"oidc_callback" URL (again in the oidc_return parameter) together with an
"oidc_provider" parameter that contains the URL-encoded issuer value of the
selected Provider, or a URL-encoded account name for OpenID Connect Discovery
purposes (aka. e-mail style identifier), or a domain name.

Sample callback:
  ${oidc_callback}?oidc_return=${oidc_return}&oidc_provider=[${issuer}|${domain}|${e-mail-style-account-name}]



==========================================================
Sample Config for PingFederate OpenID Connect & OAuth 2.0
==========================================================

Another example config for using PingFederate as your OpenID OP and/or
OAuth 2.0 Authorization server, based on the OAuth 2.0 PlayGround 3.x default
configuration and doing claims-based authorization. (running on localhost and
https://localhost/example/redirect_uri/ registered as redirect_uri for the
client "ac_oic_client")

==========================================================
OIDCProviderIssuer https://macbook:9031
OIDCProviderAuthorizationEndpoint https://macbook:9031/as/authorization.oauth2
OIDCProviderTokenEndpoint https://macbook:9031/as/token.oauth2
OIDCProviderTokenEndpointAuth client_secret_basic
OIDCProviderUserInfoEndpoint https://macbook:9031/idp/userinfo.openid
OIDCProviderJwksUri https://macbook:9031/pf/JWKS

OIDCSSLValidateServer Off
OIDCClientID ac_oic_client
OIDCClientSecret abc123DEFghijklmnop4567rstuvwxyzZYXWUT8910SRQPOnmlijhoauthplaygroundapplication

OIDCRedirectURI https://localhost/example/redirect_uri/
OIDCCryptoPassphrase <password>
OIDCScope "openid email profile"

OIDCOAuthEndpoint https://macbook:9031/as/token.oauth2
OIDCOAuthEndpointAuth client_secret_basic

OIDCOAuthSSLValidateServer Off
OIDCOAuthClientID rs_client
OIDCOAuthClientSecret 2Federate

<Location /example/>
   Authtype openid-connect
   #require valid-user
   require claim sub:joe
</Location>

<Location /example2>
   Authtype oauth20
   #require valid-user
   require claim Username:joe
</Location>
==========================================================
